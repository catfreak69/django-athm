{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Installation Install the package from PyPI. pip install django-athm Add the package to your INSTALLED_APPS and configure the needed settings in your settings.py . INSTALLED_APPS = [ ..., \"django_athm\", ] DJANGO_ATHM_PUBLIC_TOKEN = 'your-public-token' DJANGO_ATHM_PRIVATE_TOKEN = 'your-private-token' Create the model tables for storing ATH M\u00f3vil transactions and items. python manage.py migrate Add the default callback function to your root urls: urlpatterns = [ ..., path(\"athm/\", include(\"django_athm.urls\", namespace=\"django_athm\")), ] In your views, pass a ATHM_CONFIG (or whichever key you prefer) to the context: def your_view(request): context = { \"ATHM_CONFIG\": { \"theme\": \"btn\", \"language\": \"es\", \"total\": 25.0, \"subtotal\": 24.0, \"tax\": 1.0, \"metadata_1\": \"This is metadata 1\", \"items\": [ { \"name\": \"First Item\", \"description\": \"This is a description.\", \"quantity\": \"1\", \"price\": \"24.00\", \"tax\": \"1.00\", \"metadata\": \"metadata test\", } ], } } return render(request, \"your-template.html\", context=context) In the related templates where you wish to display the Checkout button, load and invoke the athm_button custom tag along with your ATHM config from the previous step. {% load django_athm %} {% athm_button ATHM_CONFIG %} NOTE : You must have jQuery loaded in your Django template BEFORE you use the athm_button tag. You can use the following snippet, placing it somewhere above the athm_button tag: <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script> Also, make sure that the CSRF token tag is available in your template. You may need to decorate your views with @requires_csrf_token . The user clicks on button rendered by your template and then uses the ATH M\u00f3vil app to pay the business associated to the public and private tokens you set up in settings.py . This package will perform a POST ajax request on success or failure to the callback view. This will persist the transaction and items in your database. You can obtain your transactions and items from the database: from django_athm.models import ATHM_Transaction, ATHM_Items my_transactions = ATHM_Transaction.objects.all() my_items = ATHM_Items.objects.all() Admin actions are available as well! You can refund transactions directly from the Django Admin interface. If you would like to synchronize your database with transactional data from ATH M\u00f3vil, you can use the athm_sync management command: $ python manage.py athm_sync --start \"2020-01-01 00:00:00\" --end \"2020-02-05 12:30:00\"","title":"Getting Started"},{"location":"#installation","text":"Install the package from PyPI. pip install django-athm Add the package to your INSTALLED_APPS and configure the needed settings in your settings.py . INSTALLED_APPS = [ ..., \"django_athm\", ] DJANGO_ATHM_PUBLIC_TOKEN = 'your-public-token' DJANGO_ATHM_PRIVATE_TOKEN = 'your-private-token' Create the model tables for storing ATH M\u00f3vil transactions and items. python manage.py migrate Add the default callback function to your root urls: urlpatterns = [ ..., path(\"athm/\", include(\"django_athm.urls\", namespace=\"django_athm\")), ] In your views, pass a ATHM_CONFIG (or whichever key you prefer) to the context: def your_view(request): context = { \"ATHM_CONFIG\": { \"theme\": \"btn\", \"language\": \"es\", \"total\": 25.0, \"subtotal\": 24.0, \"tax\": 1.0, \"metadata_1\": \"This is metadata 1\", \"items\": [ { \"name\": \"First Item\", \"description\": \"This is a description.\", \"quantity\": \"1\", \"price\": \"24.00\", \"tax\": \"1.00\", \"metadata\": \"metadata test\", } ], } } return render(request, \"your-template.html\", context=context) In the related templates where you wish to display the Checkout button, load and invoke the athm_button custom tag along with your ATHM config from the previous step. {% load django_athm %} {% athm_button ATHM_CONFIG %} NOTE : You must have jQuery loaded in your Django template BEFORE you use the athm_button tag. You can use the following snippet, placing it somewhere above the athm_button tag: <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script> Also, make sure that the CSRF token tag is available in your template. You may need to decorate your views with @requires_csrf_token . The user clicks on button rendered by your template and then uses the ATH M\u00f3vil app to pay the business associated to the public and private tokens you set up in settings.py . This package will perform a POST ajax request on success or failure to the callback view. This will persist the transaction and items in your database. You can obtain your transactions and items from the database: from django_athm.models import ATHM_Transaction, ATHM_Items my_transactions = ATHM_Transaction.objects.all() my_items = ATHM_Items.objects.all() Admin actions are available as well! You can refund transactions directly from the Django Admin interface. If you would like to synchronize your database with transactional data from ATH M\u00f3vil, you can use the athm_sync management command: $ python manage.py athm_sync --start \"2020-01-01 00:00:00\" --end \"2020-02-05 12:30:00\"","title":"Installation"},{"location":"config/","text":"settings.py The following are possible values for your Django settings.py and their purpose. DJANGO_ATHM_SANDBOX_MODE - Whether or not to use the ATH M\u00f3vil API in sandbox mode. Type: Boolean Required: No Default: False DJANGO_ATHM_PUBLIC_TOKEN - Your public token. Available in the ATH M\u00f3vil Business app. Type: String Required: Yes, except when DJANGO_ATHM_SANDBOX_MODE is True Default: None DJANGO_ATHM_PRIVATE_TOKEN - Your private token. Available in the ATH M\u00f3vil Business app. Type: String Required: Yes, except when DJANGO_ATHM_SANDBOX_MODE is True Default: None athm_button The following are the available configuration options for controlling the behavior of the athm_button template tag. public_token - You can overwrite the public token when invoking the template tag. Using this, you can control which business is on the receiving end of the purchase. Type: String Default: settings.DJANGO_ATHM_PUBLIC_TOKEN timeout - Seconds before the ATH M\u00f3vil checkout process times out. Type: Integer Values: Integer between 120 and 600 Default: 600 (10 minutes) theme - Determines the theme of the ATH M\u00f3vil checkout button. Type: String Values: \"btn\", \"btn-dark\" or \"btn-light\" Default: \"btn\" language - Determines the language on the ATH M\u00f3vil checkout button. Type: String Values: \"en\" or \"es\" Default: \"en\"","title":"Configuration"},{"location":"config/#settingspy","text":"The following are possible values for your Django settings.py and their purpose. DJANGO_ATHM_SANDBOX_MODE - Whether or not to use the ATH M\u00f3vil API in sandbox mode. Type: Boolean Required: No Default: False DJANGO_ATHM_PUBLIC_TOKEN - Your public token. Available in the ATH M\u00f3vil Business app. Type: String Required: Yes, except when DJANGO_ATHM_SANDBOX_MODE is True Default: None DJANGO_ATHM_PRIVATE_TOKEN - Your private token. Available in the ATH M\u00f3vil Business app. Type: String Required: Yes, except when DJANGO_ATHM_SANDBOX_MODE is True Default: None","title":"settings.py"},{"location":"config/#athm_button","text":"The following are the available configuration options for controlling the behavior of the athm_button template tag. public_token - You can overwrite the public token when invoking the template tag. Using this, you can control which business is on the receiving end of the purchase. Type: String Default: settings.DJANGO_ATHM_PUBLIC_TOKEN timeout - Seconds before the ATH M\u00f3vil checkout process times out. Type: Integer Values: Integer between 120 and 600 Default: 600 (10 minutes) theme - Determines the theme of the ATH M\u00f3vil checkout button. Type: String Values: \"btn\", \"btn-dark\" or \"btn-light\" Default: \"btn\" language - Determines the language on the ATH M\u00f3vil checkout button. Type: String Values: \"en\" or \"es\" Default: \"en\"","title":"athm_button"}]}